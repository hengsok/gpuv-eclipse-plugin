package group.plugins.frame.actions;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.swt.widgets.*;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.eclipse.jface.dialogs.MessageDialog;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class SampleAction implements IWorkbenchWindowActionDelegate {
	private IWorkbenchWindow window;
	/**
	 * The constructor.
	 */
	public SampleAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		// 生成Display的对象①
	    Display display = new Display();
	    // 生成Shell的对象②
	    final Shell shell = new Shell(display);
	    shell.setText("SWT的例子");
	    shell.setLayout(new FillLayout(SWT.VERTICAL));
	    // 生成Label对象③
	    Label label = new Label(shell, SWT.BORDER);
	    label.setText("请点按钮");
	    // 生成Button对象③
	    final Button button = new Button(shell, SWT.PUSH);
	    button.setText("OK");
	    // 为Button的时间定义监听器④
	    button.addSelectionListener(new SelectionAdapter() {
	        public void widgetSelected(SelectionEvent arg0) {
	            MessageBox messageBox = new MessageBox(shell, SWT.OK
	                    | SWT.ICON_INFORMATION | SWT.APPLICATION_MODAL);
	            messageBox.setMessage("按下了（" + button.getText() + "）按钮");
	            messageBox.open();
	        }
	    });
	    //打开shell对象 ⑤
	    shell.pack();
	    shell.open();
	    //结束前一直循环 ⑥
	    while (!shell.isDisposed()) {
	        if (!display.readAndDispatch()) {
	            display.sleep();
	        }
	    }
	    //释放display对象⑦
	    display.dispose();
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	/**
	 * We will cache window object in order to
	 * be able to provide parent shell for the message dialog.
	 * @see IWorkbenchWindowActionDelegate#init
	 */
	public void init(IWorkbenchWindow window) {
		this.window = window;
	}
}